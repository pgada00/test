{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "uniqueString": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "namespace": {
      "type": "string"
    },
    "vmSize": {
      "type": "string"
    },
    "osSettings": {
      "type": "object"
    },
    "nodeCount": {
      "type": "int"
    },
    "staticIps": {
      "type": "object"
    },
    "vnetName": {
      "type": "string"
    },
    "subnetName": {
      "type": "string"
    },
    "opscenterAddress": {
        "type": "string"
    }
  },
  "variables": {
    "vmName": "[concat(parameters('namespace'), 'vm')]",
    "storageAccountName": "[concat(parameters('namespace'), parameters('uniqueString'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[concat(parameters('namespace'), 'set')]",
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 18
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[parameters('location')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(parameters('namespace'), 'publicIP', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'ipLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('namespace'), 'vm', copyIndex(), parameters('uniqueString'))]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('namespace'), 'nic', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'nicLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('namespace'), 'publicIP', copyindex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('namespace'), 'publicIP', copyindex()))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(parameters('staticIps').base, copyindex(parameters('staticIps').start))]",
              "subnet": {
                "id": "[parameters('subnetName')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('namespace'), 'vm', copyindex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'vmLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', parameters('namespace'), 'nic', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', parameters('namespace'), 'set')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(parameters('namespace'), 'set'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('namespace'), 'vm', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": "[parameters('osSettings').imageReference]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('storageAccountName'),'.blob.core.windows.net/vhds/', variables('vmName'), copyindex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('namespace'), 'nic', copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('namespace'), 'vm', copyindex(), '/installdsenode')]",
      "apiVersion": "2015-06-15",
      "location": "[parameters('location')]",
      "copy": {
        "name": "[concat(parameters('namespace'), 'vmLoop')]",
        "count": "[parameters('nodeCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('namespace'), 'vm', copyindex())]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('namespace'), 'nic', copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": "[parameters('osSettings').scripts]",
          "commandToExecute": "[concat('bash dseNode.sh', ' ', parameters('namespace'), ' ', concat(parameters('staticIps').base, parameters('staticIps').start), ' ', parameters('opscenterAddress'), ' ', copyIndex() )]"
        }
      }
    }
  ],
  "outputs": {}
}
